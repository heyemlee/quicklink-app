// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  slug          String    @unique
  emailVerified Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // 关联到客户配置
  profile              Profile?
  verificationTokens   VerificationToken[]
  passwordResets       PasswordReset[]
  analytics            Analytics[]
}

model Profile {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // 基本信息
  companyName      String   @default("我的公司")
  companySubtitle  String?
  logoUrl          String?
  websiteName      String?
  websiteUrl       String?
  phone            String?
  address          String?
  email            String?
  
  // 社交媒体链接
  wechatId      String?
  instagram     String?
  facebook      String?
  tiktok        String?
  xiaohongshu   String?
  yelp          String?
  google        String?
  
  // 评价平台链接
  googleReviewUrl     String?
  yelpReviewUrl       String?
  
  // 配色方案
  primaryColor    String   @default("#7c3aed")
  secondaryColor  String   @default("#ec4899")
  accentColor     String   @default("#3b82f6")
  
  // 展示模块控制
  showContact     Boolean  @default(true)
  showFollow      Boolean  @default(false)
  showReview      Boolean  @default(false)
  
  // 平台显示控制 (JSON数组，存储要显示的平台ID)
  followPlatforms   String   @default("[]")
  reviewPlatforms   String   @default("[]")
  
  // ContactInfo配置 (用于vCard等)
  contactInfoName         String?
  contactInfoPhone        String?
  contactInfoEmail        String?
  contactInfoAddress      String?
  contactInfoWebsite      String?
  contactInfoOrganization String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([userId])
}

// 邮箱验证码模型
model VerificationToken {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  type      String   // 'email_verification' 或 'password_reset'
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

// 密码重置模型
model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

// 数据统计模型 - 每个用户的数据完全隔离
model Analytics {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // 事件类型: 'page_view', 'save_contact', 'platform_click'
  eventType    String
  
  // 平台信息（仅当eventType为platform_click时使用）
  platform     String?  // 'wechat', 'instagram', 'facebook', etc.
  platformType String?  // 'follow' 或 'review'
  
  // 访客标识（用于统计独立访客，可选）
  visitorId    String?
  
  createdAt    DateTime @default(now())
  
  // 索引优化：按用户和时间查询
  @@index([userId, createdAt])
  @@index([userId, eventType])
  @@index([eventType])
}
